//
// SchnitzlrBoarWaitingAnimationView.swift
// Generated by Core Animator version 1.5.2 on 12.06.18.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class _SchnitzlrBoarWaitingAnimationPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class SchnitzlrBoarWaitingAnimationView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 1500, height: 1500))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:1500, height:1500)
		__scaling__.center = CGPoint(x:750.0, y:750.0)
		__scaling__.clipsToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let schnitzlrBoarYellowOrangeV2__root = _SchnitzlrBoarWaitingAnimationPassthroughView()
		let schnitzlrBoarYellowOrangeV2__xScale = _SchnitzlrBoarWaitingAnimationPassthroughView()
		let schnitzlrBoarYellowOrangeV2__yScale = _SchnitzlrBoarWaitingAnimationPassthroughView()
		let schnitzlrBoarYellowOrangeV2 = UIImageView()
		let imgSchnitzlrBoarYellowOrangeV2 = UIImage(named:"Schnitzlr_Boar Yellow:Orange V2.png", in: bundle, compatibleWith: nil)
		if imgSchnitzlrBoarYellowOrangeV2 == nil {
			print("** Warning: Could not create image from 'Schnitzlr_Boar Yellow:Orange V2.png'")
		}
		schnitzlrBoarYellowOrangeV2.image = imgSchnitzlrBoarYellowOrangeV2
		schnitzlrBoarYellowOrangeV2.contentMode = .center
		schnitzlrBoarYellowOrangeV2.bounds = CGRect(x:0, y:0, width:671.0, height:871.0)
		schnitzlrBoarYellowOrangeV2__root.layer.position = CGPoint(x:722.648, y:752.371)
		schnitzlrBoarYellowOrangeV2__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		schnitzlrBoarYellowOrangeV2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		schnitzlrBoarYellowOrangeV2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		schnitzlrBoarYellowOrangeV2__root.addSubview(schnitzlrBoarYellowOrangeV2__xScale)
		schnitzlrBoarYellowOrangeV2__xScale.addSubview(schnitzlrBoarYellowOrangeV2__yScale)
		schnitzlrBoarYellowOrangeV2__yScale.addSubview(schnitzlrBoarYellowOrangeV2)
		__scaling__.addSubview(schnitzlrBoarYellowOrangeV2__root)
		viewsByName["Schnitzlr_Boar Yellow:Orange V2__root"] = schnitzlrBoarYellowOrangeV2__root
		viewsByName["Schnitzlr_Boar Yellow:Orange V2__xScale"] = schnitzlrBoarYellowOrangeV2__xScale
		viewsByName["Schnitzlr_Boar Yellow:Orange V2__yScale"] = schnitzlrBoarYellowOrangeV2__yScale
		viewsByName["Schnitzlr_Boar Yellow:Orange V2"] = schnitzlrBoarYellowOrangeV2

		self.viewsByName = viewsByName
	}

	// - MARK: Schnitzlr_Boar Waiting

	func addSchnitzlrBoarWaitingAnimation() {
		addSchnitzlrBoarWaitingAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addSchnitzlrBoarWaitingAnimation(completion: ((Bool) -> Void)?) {
		addSchnitzlrBoarWaitingAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addSchnitzlrBoarWaitingAnimation(removedOnCompletion: Bool) {
		addSchnitzlrBoarWaitingAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addSchnitzlrBoarWaitingAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addSchnitzlrBoarWaitingAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addSchnitzlrBoarWaitingAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let overshootTiming = CAMediaTimingFunction(controlPoints: 0.00, 0.00, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.650
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "SchnitzlrBoarWaiting")
			self.animationCompletions[layer.animation(forKey: "SchnitzlrBoarWaiting")!] = complete
		}

		let schnitzlrBoarYellowOrangeV2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		schnitzlrBoarYellowOrangeV2RotationAnimation.duration = 1.650
		schnitzlrBoarYellowOrangeV2RotationAnimation.values = [0.000, 0.000, 0.142, -0.140, 0.000] as [Float]
		schnitzlrBoarYellowOrangeV2RotationAnimation.keyTimes = [0.000, 0.394, 0.545, 0.848, 1.000] as [NSNumber]
		schnitzlrBoarYellowOrangeV2RotationAnimation.timingFunctions = [overshootTiming, overshootTiming, overshootTiming, overshootTiming]
		schnitzlrBoarYellowOrangeV2RotationAnimation.beginTime = beginTime
		schnitzlrBoarYellowOrangeV2RotationAnimation.fillMode = fillMode
		schnitzlrBoarYellowOrangeV2RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Schnitzlr_Boar Yellow:Orange V2__root"]?.layer.add(schnitzlrBoarYellowOrangeV2RotationAnimation, forKey:"Schnitzlr_Boar Waiting_Rotation")

		let schnitzlrBoarYellowOrangeV2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		schnitzlrBoarYellowOrangeV2ScaleYAnimation.duration = 1.650
		schnitzlrBoarYellowOrangeV2ScaleYAnimation.values = [1.000, 1.000, 0.800, 1.000, 1.000] as [Float]
		schnitzlrBoarYellowOrangeV2ScaleYAnimation.keyTimes = [0.000, 0.273, 0.303, 0.394, 1.000] as [NSNumber]
		schnitzlrBoarYellowOrangeV2ScaleYAnimation.timingFunctions = [overshootTiming, overshootTiming, overshootTiming, overshootTiming]
		schnitzlrBoarYellowOrangeV2ScaleYAnimation.beginTime = beginTime
		schnitzlrBoarYellowOrangeV2ScaleYAnimation.fillMode = fillMode
		schnitzlrBoarYellowOrangeV2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Schnitzlr_Boar Yellow:Orange V2__yScale"]?.layer.add(schnitzlrBoarYellowOrangeV2ScaleYAnimation, forKey:"Schnitzlr_Boar Waiting_ScaleY")

		let schnitzlrBoarYellowOrangeV2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		schnitzlrBoarYellowOrangeV2TranslationYAnimation.duration = 1.650
		schnitzlrBoarYellowOrangeV2TranslationYAnimation.values = [0.000, -100.000, 0.000, 0.000] as [Float]
		schnitzlrBoarYellowOrangeV2TranslationYAnimation.keyTimes = [0.000, 0.152, 0.303, 1.000] as [NSNumber]
		schnitzlrBoarYellowOrangeV2TranslationYAnimation.timingFunctions = [overshootTiming, anticOverTiming, overshootTiming]
		schnitzlrBoarYellowOrangeV2TranslationYAnimation.beginTime = beginTime
		schnitzlrBoarYellowOrangeV2TranslationYAnimation.fillMode = fillMode
		schnitzlrBoarYellowOrangeV2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Schnitzlr_Boar Yellow:Orange V2__root"]?.layer.add(schnitzlrBoarYellowOrangeV2TranslationYAnimation, forKey:"Schnitzlr_Boar Waiting_TranslationY")
	}

	func removeSchnitzlrBoarWaitingAnimation() {
		self.layer.removeAnimation(forKey: "SchnitzlrBoarWaiting")
		self.viewsByName["Schnitzlr_Boar Yellow:Orange V2__root"]?.layer.removeAnimation(forKey: "Schnitzlr_Boar Waiting_Rotation")
		self.viewsByName["Schnitzlr_Boar Yellow:Orange V2__yScale"]?.layer.removeAnimation(forKey: "Schnitzlr_Boar Waiting_ScaleY")
		self.viewsByName["Schnitzlr_Boar Yellow:Orange V2__root"]?.layer.removeAnimation(forKey: "Schnitzlr_Boar Waiting_TranslationY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "SchnitzlrBoarWaiting")
	}
}